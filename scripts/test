#!/bin/bash 
set -e

cleanup()
{
    local exit=$?
    kill $PID || true
    wait $PID || true
    exit $exit
}

cd $(dirname $0)/..

export SOCK=/var/run/dind.sock
export DOCKER_HOST=unix://${SOCK}
export CATTLE_DOCKER_USE_BOOT2DOCKER=true

ip link set dev eth0 mtu 1300

if grep overlay /proc/filesystems; then
    STORAGE=overlay
else
    STORAGE=aufs
fi
docker daemon -s $STORAGE -D -H $DOCKER_HOST >/tmp/docker.log 2>&1 &
PID=$!
trap cleanup EXIT

sleep 1

docker ps -q
for i in nginx:latest gcr.io/google_containers/hyperkube:v0.21.2 gcr.io/google_containers/etcd:2.0.9  gcr.io/google_containers/pause:0.8.0; do
    docker inspect $i >/dev/null 2>&1 || docker pull $i
done

IDS=$(docker ps -qa)
if [ -n "$IDS" ]; then
    docker kill $(docker ps -qa) || true
    docker rm -fv || true
fi

# Start up kubernetes
# docker load -i kubernetes-images.tar.gz #Uncomment for faster local wrap ci (if you have the tar)
docker run --net=host -d gcr.io/google_containers/etcd:2.0.9 /usr/local/bin/etcd --addr=127.0.0.1:4001 --bind-addr=0.0.0.0:4001 --data-dir=/var/etcd/data
docker run --net=host -d -v ${SOCK}:/var/run/docker.sock gcr.io/google_containers/hyperkube:v0.21.2 /hyperkube kubelet --api_servers=http://localhost:8080 --v=2 --address=0.0.0.0 --enable_server --hostname_override=127.0.0.1 --config=/etc/kubernetes/manifests
docker run -d --net=host --privileged gcr.io/google_containers/hyperkube:v0.21.2 /hyperkube proxy --master=http://127.0.0.1:8080 --v=2
docker ps -a

echo "Waiting for kubernetes"
until $(curl --output /dev/null --silent --fail http://localhost:8080/api/v1/services); do
    printf '.'
    sleep 5
done

for pkg in $(go list ./...); do
    if [[ $pkg != *"vendor"* ]]; then
        go test -v $pkg
    fi
done

echo OK
